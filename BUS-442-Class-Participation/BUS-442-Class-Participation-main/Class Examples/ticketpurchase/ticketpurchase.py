# Form implementation generated from reading ui file 'ticketpurchase.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tbTicketPurchase = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbTicketPurchase.setGeometry(QtCore.QRect(40, 30, 731, 431))
        self.tbTicketPurchase.setObjectName("tbTicketPurchase")
        self.tabTickPurch = QtWidgets.QWidget()
        self.tabTickPurch.setObjectName("tabTickPurch")
        self.btnExit = QtWidgets.QPushButton(parent=self.tabTickPurch)
        self.btnExit.setGeometry(QtCore.QRect(560, 250, 111, 23))
        self.btnExit.setObjectName("btnExit")
        self.btnClear = QtWidgets.QPushButton(parent=self.tabTickPurch)
        self.btnClear.setGeometry(QtCore.QRect(390, 250, 111, 23))
        self.btnClear.setObjectName("btnClear")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.tabTickPurch)
        self.btnPurchase.setGeometry(QtCore.QRect(220, 250, 111, 23))
        self.btnPurchase.setObjectName("btnPurchase")
        self.btnShowCost = QtWidgets.QPushButton(parent=self.tabTickPurch)
        self.btnShowCost.setGeometry(QtCore.QRect(60, 250, 111, 23))
        self.btnShowCost.setObjectName("btnShowCost")
        self.txtName = QtWidgets.QLineEdit(parent=self.tabTickPurch)
        self.txtName.setGeometry(QtCore.QRect(190, 40, 113, 20))
        self.txtName.setObjectName("txtName")
        self.lblName = QtWidgets.QLabel(parent=self.tabTickPurch)
        self.lblName.setGeometry(QtCore.QRect(80, 40, 91, 16))
        self.lblName.setObjectName("lblName")
        self.txtAge = QtWidgets.QLineEdit(parent=self.tabTickPurch)
        self.txtAge.setGeometry(QtCore.QRect(190, 90, 113, 20))
        self.txtAge.setObjectName("txtAge")
        self.lblAge = QtWidgets.QLabel(parent=self.tabTickPurch)
        self.lblAge.setGeometry(QtCore.QRect(80, 90, 91, 16))
        self.lblAge.setObjectName("lblAge")
        self.lblSeatType = QtWidgets.QLabel(parent=self.tabTickPurch)
        self.lblSeatType.setGeometry(QtCore.QRect(80, 140, 91, 16))
        self.lblSeatType.setObjectName("lblSeatType")
        self.cbSeatType = QtWidgets.QComboBox(parent=self.tabTickPurch)
        self.cbSeatType.setGeometry(QtCore.QRect(210, 140, 91, 22))
        self.cbSeatType.setObjectName("cbSeatType")
        self.cbSeatType.addItem("")
        self.cbSeatType.addItem("")
        self.cbSeatType.addItem("")
        self.txtTotalCost = QtWidgets.QLineEdit(parent=self.tabTickPurch)
        self.txtTotalCost.setGeometry(QtCore.QRect(190, 330, 113, 20))
        self.txtTotalCost.setObjectName("txtTotalCost")
        self.lblTotalCost = QtWidgets.QLabel(parent=self.tabTickPurch)
        self.lblTotalCost.setGeometry(QtCore.QRect(80, 330, 91, 16))
        self.lblTotalCost.setObjectName("lblTotalCost")
        self.groupBox = QtWidgets.QGroupBox(parent=self.tabTickPurch)
        self.groupBox.setGeometry(QtCore.QRect(400, 100, 211, 61))
        self.groupBox.setObjectName("groupBox")
        self.rbOneTick = QtWidgets.QRadioButton(parent=self.groupBox)
        self.rbOneTick.setGeometry(QtCore.QRect(10, 30, 80, 18))
        self.rbOneTick.setObjectName("rbOneTick")
        self.rbTwoTick = QtWidgets.QRadioButton(parent=self.groupBox)
        self.rbTwoTick.setGeometry(QtCore.QRect(70, 30, 80, 18))
        self.rbTwoTick.setObjectName("rbTwoTick")
        self.rbThreeTick = QtWidgets.QRadioButton(parent=self.groupBox)
        self.rbThreeTick.setGeometry(QtCore.QRect(130, 30, 80, 18))
        self.rbThreeTick.setObjectName("rbThreeTick")
        self.tbTicketPurchase.addTab(self.tabTickPurch, "")
        self.tabPurchMade = QtWidgets.QWidget()
        self.tabPurchMade.setObjectName("tabPurchMade")
        self.lstPurchasesMade = QtWidgets.QListWidget(parent=self.tabPurchMade)
        self.lstPurchasesMade.setGeometry(QtCore.QRect(40, 30, 651, 301))
        self.lstPurchasesMade.setObjectName("lstPurchasesMade")
        self.tbTicketPurchase.addTab(self.tabPurchMade, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tbTicketPurchase.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btnShowCost.clicked.connect(self.calculate_cost)
        self.btnPurchase.clicked.connect(self.purchase_made)
        self.btnClear.clicked.connect(self.clear)
        self.btnExit.clicked.connect(self.exit)

        self.price_dictionary = self.load_data("price.txt")

        self.tbTicketPurchase.currentChanged.connect(self.display_data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btnExit.setText(_translate("MainWindow", "Exit"))
        self.btnClear.setText(_translate("MainWindow", "Clear"))
        self.btnPurchase.setText(_translate("MainWindow", "Purchase"))
        self.btnShowCost.setText(_translate("MainWindow", "Show Cost"))
        self.lblName.setText(_translate("MainWindow", "Enter Name"))
        self.lblAge.setText(_translate("MainWindow", "Enter Age"))
        self.lblSeatType.setText(_translate("MainWindow", "Select Seat Type"))
        self.cbSeatType.setItemText(0, _translate("MainWindow", "Toplevel"))
        self.cbSeatType.setItemText(1, _translate("MainWindow", "Midlevel"))
        self.cbSeatType.setItemText(2, _translate("MainWindow", "Courtside"))
        self.lblTotalCost.setText(_translate("MainWindow", "Total Cost"))
        self.groupBox.setTitle(_translate("MainWindow", "Select Number of Tickets"))
        self.rbOneTick.setText(_translate("MainWindow", "1"))
        self.rbTwoTick.setText(_translate("MainWindow", "2"))
        self.rbThreeTick.setText(_translate("MainWindow", "3"))
        self.tbTicketPurchase.setTabText(self.tbTicketPurchase.indexOf(self.tabTickPurch), _translate("MainWindow", "Ticket Purchase"))
        self.tbTicketPurchase.setTabText(self.tbTicketPurchase.indexOf(self.tabPurchMade), _translate("MainWindow", "Purchases Made"))

    def load_data(self, file_name):

        try: 
            # creating an empty price dictionary
            price = {}
            with open(file_name, "r") as fname:
                for line in fname:
                    seat_type, price_of_ticket = line.strip().split(",")
                    price[seat_type] = int(price_of_ticket)
            return price
        
        # Specific exception block to handle file not found error
        except FileNotFoundError:
            print("The file does not exist")
        # Generic exception block for all other unexpected errors
        except Exception as e:
            print(e)
    
    def calculate_cost(self):
        try:
            current_selection = self.cbSeatType.currentText()
            if(self.rbOneTick.isChecked()):
                number_of_tickets = 1
            elif(self.rbTwoTick.isChecked()):
                number_of_tickets = 2
            elif(self.rbThreeTick.isChecked()):
                number_of_tickets = 3
            else:
                number_of_tickets = 0
            
            price_of_ticket = self.price_dictionary.get(current_selection)
            total_cost = price_of_ticket * number_of_tickets
            self.txtTotalCost.setText("$" + str(total_cost))
        except Exception as e:
            print(e)
    
    def purchase_made(self):
        try:
            name = self.txtName.text()
            age = self.txtAge.text()
            current_selection = self.cbSeatType.currentText()
            if(self.rbOneTick.isChecked()):
                number_of_tickets = 1
            elif(self.rbTwoTick.isChecked()):
                number_of_tickets = 2
            elif(self.rbThreeTick.isChecked()):
                number_of_tickets = 3
            else:
                number_of_tickets = 0

            with open("purchases_made.txt", "a") as fname:
                fname.write(name+",    "+age+",    "+current_selection+",    "+str(number_of_tickets)+"\n")
        
        except Exception as e:
            print(e)

    def display_data(self, index):
        try:
            if(index == 0):
                self.lstPurchasesMade.clear()
            else:
                with open("purchases_made.txt", "r") as fname:
                    for line in fname:
                        self.lstPurchasesMade.addItem(line)
        except FileNotFoundError:
            print("No purchase data exists")
        except Exception as e:
            print(e)

    def clear(self):
        self.txtName.clear()
        self.txtAge.clear()
        self.txtTotalCost.clear()
        self.cbSeatType.setCurrentIndex(0)
        self.rbOneTick.setChecked(False)
        self.rbTwoTick.setChecked(False)
        self.rbThreeTick.setChecked(False)

    def exit(self):
        sys.exit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
